<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="/Styles/MainStyles.css">
    <title>User Dashboard</title>
</head>

<body>
    <div class="page-layout">
        <h1 class="page-title">Welcome to the User Dashboard</h1>
        <img class="user-avatar" id="avatar" alt="Default Profile Icon by Vecteezy"
            src="../Assets/20171206_01.jpg"></img>
        <h4 id="Spotify Username">No Display Name</h4>
        <button id="spotify-login-btn" style="display: block;">Login with Spotify</button>
        <button id="start-session-btn" style="display: none;" onclick="location.href='/main'">Start A Session</button>
    </div>
</body>


<script type="module">
    const clientId = "<%= process.env.SPOTIFY_CLIENT_ID %>";
    const redirectUri = `${window.location.origin}/callback`;
    const VERIFIER_KEY = "spotify_pkce_verifier";
    const STATE_KEY = "spotify_pkce_state";

    console.log("Origin:", window.location.origin);
    console.log("Using redirectUri:", redirectUri);

    // --- Utilities ---
    function generateRandomString(len = 64) {
        const chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
        const bytes = crypto.getRandomValues(new Uint8Array(len));
        return Array.from(bytes, b => chars[b % chars.length]).join("");
    }

    async function sha256(input) {
        const data = new TextEncoder().encode(input);
        return crypto.subtle.digest("SHA-256", data);
    }

    function base64urlencode(buffer) {
        const bytes = new Uint8Array(buffer);
        let str = "";
        for (let i = 0; i < bytes.length; i++) str += String.fromCharCode(bytes[i]);
        return btoa(str).replace(/\+/g, "-").replace(/\//g, "_").replace(/=+$/g, "");
    }

    async function codeChallengeFromVerifier(verifier) {
        const digest = await sha256(verifier);
        return base64urlencode(digest);
    }

    // --- Start login (only from button) ---
    async function redirectToAuthCodeFlow() {
        // fresh verifier & state for this attempt
        const verifier = generateRandomString(64);
        const state = generateRandomString(32);

        // store BEFORE redirect (synchronous)
        localStorage.setItem(VERIFIER_KEY, verifier);
        sessionStorage.setItem(STATE_KEY, state);

        console.log("Saved verifier (length):", verifier.length);
        console.log("Saved state:", state);

        const challenge = await codeChallengeFromVerifier(verifier);
        console.log("Generated challenge (first 10):", challenge.slice(0, 10));

        const params = new URLSearchParams({
            client_id: clientId,
            response_type: "code",
            redirect_uri: redirectUri,
            scope: "streaming user-read-email user-read-private user-read-playback-state user-modify-playback-state",
            code_challenge_method: "S256",
            code_challenge: challenge,
            state
        });

        window.location.href = `https://accounts.spotify.com/authorize?${params.toString()}`;
    }

    // --- Handle callback ---
    const urlParams = new URLSearchParams(window.location.search);
    const code = urlParams.get("code");
    const returnedState = urlParams.get("state");

    if (!code) {
        // No code yet â†’ show login button
        document.getElementById("spotify-login-btn").style.display = "block";
        document.getElementById("spotify-login-btn").addEventListener("click", redirectToAuthCodeFlow);
    } else {
        // Validate state (protects against CSRF/misaligned tabs)
        const expectedState = sessionStorage.getItem(STATE_KEY);
        if (!expectedState || expectedState !== returnedState) {
            console.error("State mismatch or missing. expected:", expectedState, " got:", returnedState);
            alert("Login state mismatch. Please try logging in again from the same tab/host.");
        } else {
            sessionStorage.removeItem(STATE_KEY);
            document.getElementById("spotify-login-btn").style.display = "none";
            document.getElementById("start-session-btn").style.display = "block";
            const token = await getAccessToken(code);
            if (token) {
                const profile = await fetchProfile(token);
                populateUI(profile);
                localStorage.removeItem(VERIFIER_KEY);
            }
        }
    }

    // --- Exchange code for token ---
    async function getAccessToken(code) {
        const verifier = localStorage.getItem(VERIFIER_KEY);
        console.log("Loaded verifier exists?", Boolean(verifier), " length:", verifier?.length || 0);

        if (!verifier) {
            alert(
                "Verifier missing. Make sure the host in your address bar matches the one you started on (e.g., all 'localhost' or all '127.0.0.1')."
            );
            return null;
        }

        const form = new URLSearchParams({
            client_id: clientId,
            grant_type: "authorization_code",
            code,
            redirect_uri: redirectUri,
            code_verifier: verifier
        });

        console.log("=== TOKEN REQUEST PARAM SUMMARY ===");
        for (const [k, v] of form) console.log(k + ":", JSON.stringify(v));

        const res = await fetch("https://accounts.spotify.com/api/token", {
            method: "POST",
            headers: { "Content-Type": "application/x-www-form-urlencoded" },
            body: form
        });

        const data = await res.json();
        console.log("Token response:", data);

        if (!res.ok) {
            console.error("Token request failed:", data);
            alert("Failed to get Spotify access token. Check console.");
            return null;
        }

        localStorage.setItem("access_token", data.access_token);
        return data.access_token;
    }

    // --- Fetch profile & update UI ---
    async function fetchProfile(token) {
        const res = await fetch("https://api.spotify.com/v1/me", {
            headers: { Authorization: `Bearer ${token}` }
        });
        if (!res.ok) {
            console.error("Failed to fetch profile:", await res.text());
            alert("Failed to fetch Spotify profile. Check console.");
            return {};
        }
        return res.json();
    }

    function populateUI(profile) {
        const displayName = profile.display_name || "No Display Name";
        document.getElementById("Spotify Username").innerText = displayName;
        if (profile.images && profile.images.length > 0) {
            document.getElementById("avatar").src = profile.images[0].url;
        }
    }
</script>

</html>