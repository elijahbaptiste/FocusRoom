<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="/Styles/MainStyles.css">
    <title>Document</title>
</head>

<body>

    <h1>Welcome to the User Dashboard</h1>
    <p>This is the user dashboard where you can manage your account and preferences.</p>
    <button id="spotify-login-btn" style="display: none;">Login with Spotify</button>
    <button id="start-session-btn" style="display: none;"><a href="/main">Start A Session</a></button>

    <h1>Your Profile</h1>
    <img id="avatar" alt="Default Profile Icon by Vecteezy" src="../Assets/20171206_01.jpg"></img>
    <h4 id="Spotify Username">%= user.username %></h4>
</body>
<script type="module">
    const clientId = "<%= process.env.SPOTIFY_CLIENT_ID %>";
    const redirectUri = "http://127.0.0.1:3000/callback";

    async function redirectToAuthCodeFlow() {
        const verifier = generateCodeVerifier(128);
        const challenge = await generateCodeChallenge(verifier);
        localStorage.setItem("verifier", verifier);

        const params = new URLSearchParams({
            client_id: clientId,
            response_type: "code",
            redirect_uri: redirectUri,
            scope: "user-read-private user-read-email",
            code_challenge_method: "S256",
            code_challenge: challenge
        });

        window.location.href = `https://accounts.spotify.com/authorize?${params.toString()}`;
    }

    function generateCodeVerifier(length) {
        let text = '';
        const possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
        for (let i = 0; i < length; i++) {
            text += possible.charAt(Math.floor(Math.random() * possible.length));
        }
        return text;
    }

    async function generateCodeChallenge(codeVerifier) {
        const data = new TextEncoder().encode(codeVerifier);
        const digest = await crypto.subtle.digest('SHA-256', data);
        return btoa(String.fromCharCode(...new Uint8Array(digest)))
            .replace(/\+/g, '-')
            .replace(/\//g, '_')
            .replace(/=+$/, '');
    }

    // Auto-start PKCE flow if URL has ?code=
    const params = new URLSearchParams(window.location.search);
    const code = params.get("code");
    if (!code) {
        document.getElementById("spotify-login-btn").style.display = "block";
        document.getElementById("spotify-login-btn").addEventListener("click", redirectToAuthCodeFlow);
    } else {
        document.getElementById("spotify-login-btn").style.display = "none";
        document.getElementById("start-session-btn").style.display = "block";
        getAccessToken(code).then(token => {
            fetchProfile(token).then(profile => {
                populateUI(profile);
            });
        });
    }

    async function getAccessToken(code) {
        const verifier = localStorage.getItem("verifier");
        const params = new URLSearchParams({
            client_id: clientId,
            grant_type: "authorization_code",
            code: code,
            redirect_uri: redirectUri,
            code_verifier: verifier
        });

        const result = await fetch("https://accounts.spotify.com/api/token", {
            method: "POST",
            headers: { "Content-Type": "application/x-www-form-urlencoded" },
            body: params
        });

        const data = await result.json();
        return data.access_token;
    }

    async function fetchProfile(token) {
        const result = await fetch("https://api.spotify.com/v1/me", {
            headers: { Authorization: `Bearer ${token}` }
        });
        console.log(result);
        return await result.json();
    }

    function populateUI(profile) {
        document.getElementById("Spotify Username").innerText = profile.display_name;
        if (profile.images && profile.images.length > 0) {
            const profileImage = new Image(200, 200);
            profileImage.src = profile.images[0].url;
            document.getElementById("avatar").src = profileImage.src;
        }
    }
</script>
</html>