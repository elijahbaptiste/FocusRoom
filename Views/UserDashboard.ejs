<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="/Styles/MainStyles.css">
    <title>User Dashboard</title>
</head>

<body>
    <div class="page-layout">
        <h1 class="page-title">Welcome to the User Dashboard</h1>
        <img class="user-avatar" id="avatar" alt="Default Profile Icon by Vecteezy" src="../Assets/20171206_01.jpg"></img>
        <h4 id="Spotify Username">No Display Name</h4>
        <button id="spotify-login-btn" style="display: block;">Login with Spotify</button>
        <button id="start-session-btn" style="display: none;" onclick="location.href='/main'">Start A Session</button>
    </div>
</body>


<script type="module">
    const clientId = "<%= process.env.SPOTIFY_CLIENT_ID %>";
    const redirectUri = "http://127.0.0.1:3000/callback";

     function generateCodeVerifier() {
        const possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
        const values = crypto.getRandomValues(new Uint8Array(64));
        return values.reduce((acc, x) => acc + possible[x % possible.length], "");
    }    
    
    const sha256 = async (plain) => {
        const encoder = new TextEncoder()
        const data = encoder.encode(plain)
        return window.crypto.subtle.digest('SHA-256', data)
    }

    const base64urlencode = (input) => {
        return btoa(String.fromCharCode.apply(null, new Uint8Array(input))
            .replace(/\+/g, '-').replace(/\//g, '_').replace(/=+$/, ''));
    }

   async function generateCodeChallenge(codeVerifier) {
        const data = new TextEncoder().encode(codeVerifier);
        const digest = await crypto.subtle.digest('SHA-256', data);
        return btoa(String.fromCharCode(...new Uint8Array(digest)))
            .replace(/\+/g, '-')
            .replace(/\//g, '_')
            .replace(/=+$/, '');
    }

     

    async function redirectToAuthCodeFlow() {
const verifier = await base64urlencode(generateCodeVerifier(50));
        console.log("Generated verifier:", verifier);
        localStorage.setItem("verifier", verifier);
        const hashed = await sha256(verifier);
        const challenge = await base64urlencode(hashed);
        console.log("Generated challenge:", challenge);
        

        const params = new URLSearchParams({
            client_id: clientId,
            response_type: "code",
            redirect_uri: redirectUri,
            scope: "streaming user-read-email user-read-private user-read-playback-state user-modify-playback-state",
            code_challenge_method: "S256",
            code_challenge: challenge
        });
        console.log("Redirecting to Spotify with params:", params.toString());
        window.location.href = `https://accounts.spotify.com/authorize?${params.toString()}`;
    }

    // Auto-start PKCE flow if URL has ?code=
    const params = new URLSearchParams(window.location.search);
    const code = params.get("code");
    console.log("URL code parameter:", code);
    if (!code) {
        document.getElementById("spotify-login-btn").style.display = "block";
        document.getElementById("spotify-login-btn").addEventListener("click", redirectToAuthCodeFlow);
    } else {
        document.getElementById("spotify-login-btn").style.display = "none";
        document.getElementById("start-session-btn").style.display = "block";
        getAccessToken(code).then(token => {
            fetchProfile(token).then(profile => {
                populateUI(profile);
            });
        });
    }

    async function getAccessToken(code) {
        const verifier = localStorage.getItem("verifier");
        console.log("Loaded verifier:", verifier);
        console.log("Authorization code:", code);
        console.log("Client ID:", clientId);
        console.log("Redirect URI:", redirectUri);
        if (!verifier) alert("Verifier missing from localStorage!");

        const params = new URLSearchParams({
            client_id: clientId,
            grant_type: "authorization_code",
            code: code,
            redirect_uri: redirectUri,
            code_verifier: verifier
        });

        console.log("=== EXACT PARAMETERS BEING SENT ===");
        for (let [key, value] of params) {
            console.log(`${key}: "${value}"`);
        }

        const result = await fetch("https://accounts.spotify.com/api/token", {
            method: "POST",
            headers: { "Content-Type": "application/x-www-form-urlencoded" },
            body: params
        });

        const data = await result.json();
        console.log("Token response:", data);
        if (!result.ok) {
            console.error("Token request failed:", data);
            alert("Failed to get Spotify access token. Check console.");
            return null;
        }
        localStorage.setItem("access_token", data.access_token);
        console.log("Access token:", data.access_token);
        return data.access_token;
    }

    async function fetchProfile(token) {
        const result = await fetch("https://api.spotify.com/v1/me", {
            headers: { Authorization: `Bearer ${token}` }
        });
        if (!result.ok) {
            console.error("Failed to fetch profile:", await result.text());
            alert("Failed to fetch Spotify profile. Check console.");
            return {};
        }
        //localStorage.removeItem("verifier");
        return await result.json();
    }

    function populateUI(profile) {
        const displayName = profile.display_name || "No Display Name";
        document.getElementById("Spotify Username").innerText = displayName;
        if (profile.images && profile.images.length > 0) {
            const profileImage = new Image(200, 200);
            profileImage.src = profile.images[0].url;
            document.getElementById("avatar").src = profileImage.src;
        }
    }
</script>
</html>